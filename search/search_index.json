{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Matchbox is an open source initiative to support testing and implementation of FHIR-based solutions and to map or capture health data into HL7\u00ae FHIR\u00ae ,  the standard for healthcare interoperability. See matchbox.health for more information.</p> <p>Matchbox can be deployed as a microservice in your IT infrastructure or used as a standalone java library.</p> <p>The software is licensed under the business-friendly Apache Software License 2.0 and is based on the HAPI FHIR project. </p>"},{"location":"#changelog","title":"Changelog","text":"<p>Changelog</p>"},{"location":"#main-features","title":"Main Features","text":"<ul> <li>Validation of FHIR implementations</li> <li>Mapping health data to and from FHIR using the FHIR mapping language</li> </ul>"},{"location":"api/","title":"API for Matchbox","text":"<p>Matchbox is a FHIR server based on the hapifhir/hapi-fhir-jpaserver-starter </p> <ul> <li>(pre-)load FHIR implementation guides from the package server for conformance resources (StructureMap, Questionnaire, CodeSystem, ValueSet, ConceptMap, NamingSystem, StructureDefinition). The \"with-preload\" subfolder contains an example with the implementation guides provided for the public test server.</li> <li>validation support: [server]/$validate for checking FHIR resources conforming to the loaded implementation guides</li> <li>FHIR Mapping Language endpoints for creation of StructureMaps and support for the StructureMap/$transform operation</li> <li>SDC (Structured Data Capture) extraction support based on the FHIR Mapping language and Questionnaire/$extract</li> </ul> <p>a public test server is hosted at https://test.ahdis.ch/matchboxv3/fhir with a corresponding gui https://test.ahdis.ch/matchboxv3/</p>"},{"location":"cda/","title":"CDA Logical Model","text":"<p>To convert between CDA and FHIR an Logical Model is needed which can represent the CDA standard within FHIR. This work has been undertaken by HL7 International and is in current development (source, ci-build). ahdis has forked the CDA Logical Model and has made the following changes in the main branch:</p> <ul> <li>Support for IHE PHARM (PharmContent, PharmIngredient, PharmMedicineClass, PharmPackagedMedicine, PharmSpecializedKind, PharmSubstance, PharmSuperContent) and IHE LAB (LabCriterion, LabCondition) extensions</li> <li>Support for Patient.birthTime</li> </ul> <p>CDA logical model, Package package.tgz</p> <p>Note: The CDA-Model is currently built as an FHIR R5 model.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>2023/03/06 Release 3.2.0</p> <ul> <li>updated CDA core logical model 2.0 and added tests</li> <li>docker multiarchitecture support and ci-build setup #76</li> <li>proxy support for downloading packages, thanks @ValentinLorand for your PR, #76</li> <li>matchbox-server: disable caching for specific engines / implementation guides #77</li> <li>update to core 5.6.100 and hapi-fhir 5.4.1 for r4 and r5 maps support #81</li> </ul> <p>2023/02/01 Release 3.1.0</p> <ul> <li>Reenable FHIR Mapping Language tutorial, xml and json issues with matchbox #51</li> <li>Enable create and update on conformance resources #70, valid for 60 minutes (not persisting)</li> <li>GUI: more intuitive order for validation #69</li> <li>GUI: paged ig's page does not work #67</li> <li>Update to https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.92 and hapi-fhir 6.2.5</li> <li>validation difference to HL7 FHIR validator #71: only selected ig (and dependencies) for selected canonical will be used for validation if configured on matchbox (including no dynamic loading of packages depending on meta.profile)</li> <li>spurios validation erros with package validation #72</li> <li>Fixed package configuration, not loading additional ig / conformance resources #71</li> <li>loading IG from package by filepath does not work #26</li> <li>base release with no ig's configured: docker pull eu.gcr.io/fhir-ch/matchbox:v313</li> </ul> <p>2023/01/16 Release 3.0.0</p> <ul> <li>Update to https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.6.88</li> <li>Extracting matchbox-engine out of matchbox for validation and transformation with standalone validation engine</li> <li>CDA transformation: Updating to latest CDA Core 2.0 logical model with lab/pharm additions, package</li> <li>matchbox-server for validation and transformation but not storage of FHIR resources</li> <li>cda to fhir: decimal in cda allows spaces #62</li> <li>Mapping of xmlText fails #61</li> <li>removing questionnaire viewer and mobile access gateway gui</li> </ul> <p>2022/09/11 Release 2.4.0</p> <ul> <li>hapi-fhir 6.2.0 and org.hl7.fhir.core 5.6.43</li> <li>update mobile access</li> <li>ihe.iti.pmir#1.5.0 cannot be uploaded to matchbox #59: removed Subscription from resources to import</li> <li>show all cda2fhir and fhir2cda maps #58</li> <li>hapi.fhir.version: 6.2.0-PRE5-SNAPSHOT and fhir.core.version 5.6.65</li> </ul> <p>2022/07/11 Release 2.3.0</p> <ul> <li>favicon fixed #53</li> <li>add possiblity to add a static file location #57</li> </ul> <p>2022/06/08 Release 2.2.0</p> <ul> <li>FHIR Mapping Language tutorial, xml and json issues #51</li> <li>base release with no ig's configured: docker pull eu.gcr.io/fhir-ch/matchbox:v220</li> </ul> <p>2022/05/25 Release 2.1.0</p> <ul> <li>hapi-fhir 6.0.0 and org.hl7.fhir.core 5.6.43</li> <li>Validation: CapabilityStatement caching fixed #43</li> <li>prototype SDC $assembly operation #46</li> <li>Enable SDC extraction with unknown ValueSets #48</li> <li>Patch for FHIR Mapping Language: funcMemberOf/resolveValueSet: Not Implemented Yet #49</li> <li>validation without terminology server and with hl7.terminology #50</li> <li>base release with no ig's configured: docker pull eu.gcr.io/fhir-ch/matchbox:v210</li> </ul> <p>2022/04/28 Release 2.0.0</p> <ul> <li>version of ig, validator and matchbox should be provided in the validation report #40</li> <li>hapi-fhir 6.0.0-PRE10-SNAPSHOT and org.hl7.fhir.core 5.6.43</li> <li>allow xml in gui for validation #38</li> <li>mobile access gateway gui: prefix DocumentEntry.identifier with urn:uuid in GUI #41</li> <li>base release with no ig's configured: docker pull eu.gcr.io/fhir-ch/matchbox:v200</li> </ul> <p>2022/03/21 Release 1.9.1</p> <ul> <li>custom log banner, thanks ralych</li> <li>Fixed StructureMap transformation issue core and issue#37</li> </ul> <p>2022/03/10 Release 1.9.0</p> <ul> <li>Updated to hap-fhir 5.7.0, fhir.core.version (validator) 5.6.27</li> <li>Extended Mobile Access Gateway support for PMP (replacing FHIR documents with selected Patient in Mobile Access Gateway, transforming to CDA and MDH publish)</li> <li>base release with no ig's configured: docker pull eu.gcr.io/fhir-ch/matchbox:v190</li> <li>docker-compose setup for postgres and for postgres and swiss igs</li> </ul> <p>2022/02/21 Release 1.8.2</p> <ul> <li>OAuth integration for Mobile Access Gateway in webapp</li> </ul> <p>2022/02/21 Release 1.8.1</p> <ul> <li>Parsing of bundles adds additional contained resources [#11|(https://github.com/ahdis/matchbox/issues/11)</li> </ul> <p>2022/02/08 Release 1.8.0</p> <ul> <li>Integrate webapp running on matchbox port and root itself #35</li> <li>NPM can be downloaded with Accept:application/gzip on Implementation Guide Resource</li> </ul> <p>2022/01/13 Release 1.7.1</p> <ul> <li>JSON POST Requests have a size limit (filler issue) #33</li> <li>FHIRPathEnginge construction is expensive #31</li> <li>SNOMED CT Code validation problem for Quantity in Medication.amount #30</li> <li>Validation: Uploaded StructureDefinitions via NPM are not available in same session for $validate #29</li> <li>StructureMap transformation: Bundle request element not correctly ordered #27</li> <li>Error on release V1.6.0 #24, thanks @delcroip</li> <li>Integrated PR and PR for translate in Structure Map, thanks @aralych</li> <li>base release with no ig's configured: docker pull eu.gcr.io/fhir-ch/matchbox:v171</li> </ul> <p>2022/01/04 Release 1.6.0</p> <ul> <li>extend FHIR API based on Implementation Guide NPM packages #23</li> <li>add spring actuator for health checks #22</li> <li>disable special questionnaire validation #21</li> <li>base release with no ig's configured: docker pull eu.gcr.io/fhir-ch/matchbox:v160</li> </ul> <p>2021/12/17 Release 1.5.0</p> <ul> <li>updated hapi-fhir to 5.6.0</li> <li>patched slicing validation problems in bundle</li> <li>activated $expand operation on ValueSet</li> <li>base release with no ig's configured: docker pull eu.gcr.io/fhir-ch/matchbox:v150</li> </ul> <p>2021/09/14 Release 1.4.0</p> <ul> <li>updated hapi-fhir to 5.5.1, no more dependencies on forked packages</li> <li>$extract on QuestionnaireResponse for StructureMap based extraction</li> <li>support for the $transform operation for StructureMap</li> <li>FHIR Mapping Language Support (POST FHIR Mapping language, transform)</li> <li>fixed issues #7 and #8 (custom SearchParmeters and validation)</li> <li>public test instance https://test.ahdis.ch/matchbox/fhir</li> <li>base release with no ig's configured: docker pull eu.gcr.io/fhir-ch/matchbox:v140</li> <li>swiss epr release: docker pull eu.gcr.io/fhir-ch/matchbox-swissepr:v140</li> </ul> <p>2021/07/05 Release 1.3.0</p> <ul> <li>updated hapi-fhir to 5.5.0-PRE5-SNAPSHOT with patches for hapi-fhir and org.hl7.fhir.core (dev branch on ahdis foreach project)</li> <li>updated swiss epr implementation guides to STU2 Ballot</li> <li>renamed project to matchbox-validator</li> <li>base release with no ig's configured: docker pull eu.gcr.io/fhir-ch/matchbox-validator:v130</li> <li>swiss epr release: docker pull eu.gcr.io/fhir-ch/matchbox-validator-swissepr:v130</li> <li>testsystem endpoint for siwssepr validator: https://test.ahdis.ch/matchbox-validator/fhir</li> </ul> <p>2020/12/23 Release 1.2.0</p> <ul> <li>updated hapi-fhir to 5.2.0</li> <li>updated ch-epr-mhealth to 0.1.2</li> <li>Release is available here:   docker pull eu.gcr.io/fhir-ch/hapi-fhir-jpavalidator:v120</li> </ul> <p>2020/10/22 Release 1.1.0</p> <ul> <li>updated hapi-fhir to (21.10.2020) and spring-boot</li> <li>updated fhir.core.version 5.1.15, later is not yet possible due to class name changes</li> <li>fixed EHS-439 added testcase for EHS-439 to verify correct behaviour with fhir.core.version 5.1.15 https://github.com/hapifhir/org.hl7.fhir.core/releases/tag/5.1.15</li> <li>fixed Parameters evaluation two different versions for calling the $validate operation: with Parameters resource and containing the resource to validate within as additional name \"resource\" parameter   with Resource to validate directly according to 7.5.5 Asking a FHIR Server</li> <li>fixed EHS-431 Validator crashes and does not give a result if the JSON starts with a [ ] (square bracket).</li> <li>fixed EHS-419 warning instead of crash for Byte order mark in validation request</li> <li>changed docker build: ig's will be installed during docker build process, no connection to the internet is needed for validation</li> <li>Validation Test Suite for all examples in the loaded ig's checking that they can be validated with no errors with the $validate operation</li> <li>Validation Test Suite with hapi-fhir-client for individual examples</li> <li>Experimental: Validation Test Suite based on on fhir-testcases (only R4, no test-cases from ig's, valuesets or with profiles yet)</li> </ul> <p>2020/09/02 Release 1.0.0</p> <ul> <li>system level $validate operation for $ig's</li> <li>based on hapi-fhir-jpaserverstarter 5.1.0</li> </ul>"},{"location":"docker/","title":"Matchbox container","text":"<p>if you have the rights you can download Matchbox as a docker container:</p> <pre><code>docker pull europe-west6-docker.pkg.dev/ahdis-ch/ahdis/matchbox:v3.2.0-SNAPSHOT\n</code></pre>"},{"location":"docker/#configurable-base-image","title":"Configurable base image:","text":"<pre><code>docker run -d --name matchbox -p 8080:8080 -v /Users/oliveregger/apps/:/apps/ matchbox\n</code></pre> <p>Server will then be accessible at http://localhost:8080/matchboxv3/fhir/metadata.</p> <p>The local volume /Users/oliveregger/apps/ will be mapped inside the container and Matchbox will serve the content if is requested via http://localhost:8080/matchboxv3/apps/ (allows you to add own html apps).</p> <p>We recommend to put at least 2.5 GB of RAM for the container instance, depending on how many ig's yoiu plan to install and want to use.</p>"},{"location":"docker/#live-and-readyness-checks","title":"Live and Readyness checks","text":"<p>To check if the container is live and ready you can check the health:</p> <pre><code>GET https://test.ahdis.ch/matchboxv3/actuator/health HTTP/1.1\nAccept: application/vnd.spring-boot.actuator.v3+json\n\nHTTP/1.1 200\nContent-Type: application/vnd.spring-boot.actuator.v3+json\nTransfer-Encoding: chunked\nDate: Thu, 02 Feb 2023 15:55:12 GMT\nVia: 1.1 google\nAlt-Svc: h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000\nConnection: close\n\n{\n  \"status\": \"UP\",\n  \"groups\": [\n    \"liveness\",\n    \"readiness\"\n  ]\n}\n</code></pre> <p>You can also use actuator/health/liveness or actuator/health/readiness.</p> <p>To check the amount of memory used by the jvm use: /actuator/metrics/jvm.memory.used</p>"},{"location":"docker/#using-docker-compose-with-a-persistent-postgresql-database","title":"Using docker-compose with a persistent postgreSQL database","text":"<p>To use docker-compose with Matchbox you need to checkout Matchbox from github.</p> <p>The database will be stored in the \"data\" directory. The configuration can be found in the \"with-postgres\" directory or in the \"with-preload\" directory.</p> <p>Change to either with-posgres directory or the with-preload directory</p> <p>For the first time, you might need to do</p> <pre><code>mkdir data\ndocker-compose up matchbox-db\n</code></pre> <p>that the database gets initialized before Matchbox is starting up (needs a fix)</p> <pre><code>docker-compose up\n</code></pre> <p>Matchbox will be available at http://localhost:8080/matchboxv3/fhir Matchbox-gui will be available at http://localhost:8080/matchboxv3/#/</p> <p>Export the DB data:</p> <pre><code>docker-compose exec -T matchbox-test-db pg_dump -Fc -U matchbox matchbox &gt; mydump\n</code></pre> <p>Reimport the DB data:</p> <pre><code>docker-compose exec -T matchbox-test-db pg_restore -c -U matchbox -d matchbox &lt; mydump\n</code></pre>"},{"location":"docker/#configure-a-own-docker-image-with-preinstalled-packages","title":"Configure a own docker image with preinstalled packages","text":"<p>During a regular container startup all implementation guides will be deployed to the database. This packages can be provided by the</p> <ol> <li>fhir package servers</li> <li>absolute http address to package</li> <li>classpath</li> <li>filesystem</li> </ol> <p>If you want to prepare a container which does not need internet acess during the startup (required by 1 and 2) you can build a new containter image will do the download and installation packages already during the startup process (adding this line into the Dockerfile):</p> <p>RUN java -Xmx1G -Xms1G -jar /matchbox.jar --hapi.fhir.only_install_packages=true</p>"},{"location":"features/","title":"Features","text":""},{"location":"features/#validation-of-fhir-implementations","title":"Validation of FHIR implementations","text":"<p>Need to test your FHIR implementation for correctness? FHIR implementation guides have different requirements on your implementation. From country-specific adaptations (e.g. Swiss FHIR specifications), to requirements for specific use cases like the International Patient Summary (IPS), or your own organization\u2019s internal FHIR implementation guide. You can configure Matchbox to meet your requirements, and validate your FHIR resources directly with an API during testing or in production. Validation is based on the official HL7 Java reference validator in accordance with the provided terminologies. An external terminology server can also be configured, and you can validate your implementation through the open FHIR API or through a simple GUI. Matchbox can also be integrated with EVS Client, the validation tool from IHE that is used during Connectathons.</p>"},{"location":"features/#mapping-health-data-to-and-from-fhir-using-the-fhir-mapping-language","title":"Mapping health data to and from FHIR using the FHIR mapping language","text":"<p>Need to map your health data into FHIR and want to share your mapping to FHIR in a re-usable way? The FHIR mapping language allows you to define mapping in a text representation and transform them to FHIR StructureMap resources. Those resources can then be provided in FHIR implementation guides. Matchbox applies the mapping to your own data to create FHIR-compatible data sets. It also checks that the mapping conforms with the included validation stack. In Switzerland, this approach is tested with mapping between CDA and FHIR exchange formats for medication (CDA-FHIR-Maps).</p>"},{"location":"features/#structured-data-capture-sdc-questionnaire-support-for-data-extraction-with-the-fhir-mapping-language","title":"Structured Data Capture (SDC) Questionnaire support for data extraction with the FHIR Mapping Language","text":"<p>SDC (Structured Data Capture) extraction support based on the FHIR Mapping language and preliminary support for assemble of modular questionnaires.</p>"},{"location":"matchbox-engine/","title":"Matchbox Engine","text":"<p>Matchbox engine has been created to allow a standalone FHIR validation and transformation without the need for a connection to the internet:</p> <ul> <li>java library</li> <li>supports CDA to FHIR mapping</li> <li>FHIR validation with no external terminology server</li> <li>local configuration (no internet access necessary, ig packages can be loaded directly from classpath)</li> <li>javadoc</li> </ul> <p>default fhir package configuration:</p> <ul> <li>cda-core-2.0#2.1.0-cibuild.tgz(*patched)</li> <li>hl7.fhir.r4.core.tgz</li> <li>hl7.fhir.xver-extensions#0.0.11.tgz</li> <li>hl7.terminology#5.0.0.tgz</li> </ul>"},{"location":"matchbox-engine/#library-based-on-matchbox-and-hapi-fhir-orghl7fhircore","title":"Library based on matchbox and hapi-fhir / org.hl7.fhir.core","text":"<p>The transformation and validation functionality has been extracted out of matchbox (https://github.com/ahdis/matchbox) into the matchbox-engine (https://github.com/ahdis/matchbox/tree/main/matchbox-engine) library. This has been done in a way, that the matchbox project contains different modules:</p> <pre><code>[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO]\n[INFO] matchbox                                                           [pom]\n[INFO] matchbox-engine                                                    [jar]\n[INFO] matchbox-server                                                    [jar]\n[INFO]\n[INFO] ----------------------&lt; matchbox.health:matchbox &gt;----------------------\n[INFO] Building matchbox 3.0.0-SNAPSHOT                                   [1/4]\n</code></pre> <p>matchbox-engine creates the java library, matchbox-engine-cli adds all dependencies as a fat jar which can be directly executed (&gt;100 MB) and matchbox-server provides the FHIR API as a microservice. It also uses matchbox-engine, so if matchbox is used during developing and testing the mapping, matchbox-engine will deliver the same result.</p> <p>matchbox-engine is only based on org.hl7.fhir.core libraries (HAPI FHIR - HL7 FHIR Core Artifacts), the dependency to hapi-fhir is not necessary for the library. The library is derived from the HL7 Java FHIR Validator and FHIR Mapping Language implementation. During the development of the mapping a few missing functionalities in the Mapping Language have been discovered and have been also contributed back to the org.hl7.fhir.core project (Pull requests). Note however that there are some classes patched in matchbox-engine because of peculiarities in the parsing/mapping of CDA and package handling (patched files). These patched files are updated and changes applied during each new release of org.hl7.fhir.core and tests are run to verify the correctness of the defined mappings. The library requires JDK11 which is also the minimum requirement for HAPI FHIR - HL7 FHIR Core Artifacts.</p>"},{"location":"matchbox-engine/#api-and-javadoc","title":"API and Javadoc","text":"<p>The source code is documented with Javadoc. Test cases illustrate the main functionality for transformation with the FHIR Mapping Language and for CDA to FHIR transformation.</p> <p>For valdiation or transformation you need to instantiate a matchbox-engine. This matchbox-engine can be configured with specific a version of an implmenentation guide and it's dependencies. You can instantiate multiple engines with different ig's.</p>"},{"location":"matchbox-engine/#validation","title":"Validation","text":"<p>Validaton is currently supported for FHIR R4. You can get an instance of matchbox-engine the following way:</p> <pre><code>engine = new MatchboxEngineBuilder().getEngineR4();\n</code></pre> <p>This engine is configured with the core libraries for FHIR Release 4 (hl7.fhir.r4.core.tgz, hl7.fhir.xver-extensions#0.0.11.tgz, hl7.terminology#5.0.0.tgz). You can then invoke the validation with</p> <pre><code>InputStream in = CdaToFhirTransformTests.class.getResourceAsStream(\"/pat.json\");\norg.hl7.fhir.r4.model.OperationOutcome outcome = engine.validate(in,FhirFormat.JSON, \"http://hl7.org/fhir/StructureDefinition/Patient\");\n</code></pre> <p>You have the ability to add additional implementation guides to the engine (e.g. if you wan\u2019t to support validation for your implementation guide). The engine will look for the npm package provided in the classpath:</p> <pre><code>engine.getIgLoader().loadIg(engine.getIgs(), engine.getBinaries(), \"myig.tgz\", true);\n</code></pre> <p>You can create also a new instance based on an existing engine. This might be needed if you want to update conformance resources in an instance or if you want to have support for validation with different versions of ig\u2019s (an engine can only be configured with one ig version, there is no support that an engine has two versions of the same ig).</p>"},{"location":"matchbox-engine/#using-the-fhir-mapping-language-for-transformation","title":"Using the FHIR Mapping Language for transformation","text":"<p>If the engine has been configured already with StructureMap resources (e.g. provided within an Implementation Guide) the transformation can be directly called:</p> <pre><code>Resource res = engine.transformToFhir(getFileAsStringFromResources(\"/qr.json\"), true, \"http://ahdis.ch/matchbox/fml/qr2patgender\");\n</code></pre> <p>If you wan\u2019t to provide the StructureMap yourself you can parse a FHIR Mapping Language map file and add the StructureMap resource then to the engine.</p> <pre><code>StructureMap sm = engine.parseMap(getFileAsStringFromResources(\"/qr2patgender.map\"));\nengine.addCanonicalResource(sm);\n</code></pre> <p>For the transformation the canonical Url of the StructureMaps has to be used.</p>"},{"location":"matchbox-engine/#cda-to-fhir-mapping","title":"CDA to FHIR mapping","text":"<p>To support CDA to FHIR mapping (or vice versa) a specific CDAEngine is available, which is configured with CDA Logical Model. To do CDA to FHIR transformations you need to write the mapping logic and provide them as StructureMap resources. E.g. for the Swiss medication project the following maps have been developed: http://fhir.ch/ig/cda-fhir-maps/index.html</p> <p>You can the load the engine with those maps:</p> <pre><code>engine = new CdaMappingEngine.CdaMappingEngineBuilder().getEngine(\"/cda-fhir-maps-300.tgz\");\n</code></pre> <p>And then do the transformation with</p> <pre><code>String result = engine.transform(cda, false, \"http://fhir.ch/ig/cda-fhir-maps/StructureMap/CdaToBundle\", true);\n</code></pre>"},{"location":"validation/","title":"Validation of FHIR resources","text":"<p>matchbox can validate FHIR resources if they are conform to the FHIR R4 specification and conform to the requirements of specific implememenationg guides.</p> <p>Validation is based on the official HL7 Java reference validatorin accordance with the provided terminologies. An external terminology server can also be configured, and you can validate your implementation through the $validate operation with the FHIR API or through a simple GUI.</p>"},{"location":"validation/#matchbox-engine","title":"matchbox engine","text":"<p>see matchbox-engine for using the validation functionaliy as a library.</p>"},{"location":"validation/#matchbox","title":"matchbox","text":""},{"location":"validation/#api","title":"API","text":"<p>For the $validate operation on the server see the OperationDefintion for validation support: [server]/$validate for checking FHIR resources conforming to the loaded implementation guides.</p> Parameter IN Card Description resource 1..1 The resource (or logical instance) to validate, needs to be provided in the HTTP Body, the HTTP Content-Type header needs to be indicated if it is application/fhir+json or application/fhir+xml profile 1..1 profile to validate the resources against. Within the profile parameter, the targetProfile returns all profiles possible to use for validation, with the canonincal url, and with the canonical url and the business version of the profile ig 0..1 the Implementation Guide and version which should be used for validation, eg. ch.fhir.ig.ch-core#3.0.0 txServer 0..1 txServer to use, n/a if none (default) <p>The oeration returns an array of OperationOutcome with severity defined as fatal, error, warning or information.</p> <p>The first entry will contain the information in what configuraiton the validation was perfomed, e.g:</p> <pre><code>Validation for profile http://fhir.ch/ig/ch-core/StructureDefinition/ch-core-patient|3.0.0 (2018-10-15T00:00:00+10:00) with packages: hl7.fhir.xver-extensions#0.0.13, hl7.fhir.r4.core#4.0.1, hl7.terminology#5.0.0, ihe.formatcode.fhir#1.1.0, ch.fhir.ig.ch-epr-term#2.0.8, ch.fhir.ig.ch-core#3.0.0 No Issues detected. Total: 4430ms powered by matchbox-engine 3.1.0, hapi-fhir 6.2.5 and org.hl7.fhir.core 5.6.92 validation parameters Parameters {doNative=false, hintAboutNonMustSupport=false, recursive=false, doDebug=false, assumeValidRestReferences=false, canDoNative=false, noExtensibleBindingMessages=false, noUnicodeBiDiControlChars=false, noInvariants=false, wantInvariantsInMessages=false, txServer='http://tx.fhir.org', lang='null', snomedCT='900000000000207008', targetVer='null', ig=ch.fhir.ig.ch-core#3.0.0, questionnaireMode=CHECK, level=HINTS, mode=VALIDATION, securityChecks=false, crumbTrails=false, forPublication=false, jurisdiction=urn:iso:std:iso:3166#US, allowExampleUrls=false, locale='English', locations={}}\n</code></pre>"},{"location":"validation/#configuration-parameters","title":"configuration parameters","text":"<p>Default validation parameters can be set directly in provided application.yaml</p> <pre><code>hapi:\n  fhir:\n    implementationguides:\n      fhir_r4_core:\n        name: hl7.fhir.r4.core\n        version: 4.0.1\n        url: classpath:/hl7.fhir.r4.core.tgz\n      fhir_terminology:\n        name: hl7.terminology\n        version: 5.0.0\n        url: classpath:/hl7.terminology#5.0.0.tgz\n      cda:\n        name: ch.fhir.ig.cda-fhir-maps\n        version: 0.4.0-cibuild\n        url: https://build.fhir.org/ig/hl7ch/cda-fhir-maps/package.tgz\n      chemd:\n        name: ch.fhir.ig.ch-emed\n        version: 3.0.0\nmatchbox:\n  fhir:\n    context:\n      txServer: n/a\n      igsPreloaded: ch.fhir.ig.cda-fhir-maps#0.4.0-cibuild, ch.fhir.ig.ch-emed#3.0.0\n</code></pre> Parameter Card Description implementationguides 0..* the Implementation Guide and version which with which matchbox will be configured, you can provide by classpath, file, http address, if none is specified the FHIR package servers will be used (need to be online) txServer 0..1 txServer to use, n/a if none (default) igsPreloaded 0..* For each mentioned ImplemetationGuide (comma seperated) an engine will be created, which will be cached in memory as long the application is running. Other IG's will created on demand and will be cached for an hour for subsequent calls. Tradeoff between memory consumption and first response time (creating of engine might have duration of half a minute). Default no igs are preloaded"},{"location":"apidocs/legal/jquery/","title":"Jquery","text":""},{"location":"apidocs/legal/jquery/#jquery-v351","title":"jQuery v3.5.1","text":""},{"location":"apidocs/legal/jquery/#jquery-license","title":"jQuery License","text":"<pre><code>jQuery v 3.5.1\nCopyright JS Foundation and other contributors, https://js.foundation/\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n******************************************\n\nThe jQuery JavaScript Library v3.5.1 also includes Sizzle.js\n\nSizzle.js includes the following license:\n\nCopyright JS Foundation and other contributors, https://js.foundation/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/sizzle\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n\n*********************\n\n</code></pre>"},{"location":"apidocs/legal/jqueryUI/","title":"jqueryUI","text":""},{"location":"apidocs/legal/jqueryUI/#jquery-ui-v1121","title":"jQuery UI v1.12.1","text":""},{"location":"apidocs/legal/jqueryUI/#jquery-ui-license","title":"jQuery UI License","text":"<pre><code>Copyright jQuery Foundation and other contributors, https://jquery.org/\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/jquery/jquery-ui\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nCopyright and related rights for sample code are waived via CC0. Sample\ncode is defined as all source code contained within the demos directory.\n\nCC0: http://creativecommons.org/publicdomain/zero/1.0/\n\n====\n\nAll files located in the node_modules and external directories are\nexternally maintained libraries used by this software which have their\nown licenses; we recommend you read them, as their terms may differ from\nthe terms above.\n\n</code></pre>"}]}